import { Ollama } from 'ollama';

async function call_model(model: string) {
    const ollama = new Ollama({
      host: 'http://host.docker.internal:11434'
    });

    const response = await ollama.chat({
        model: model,
        messages: [{ role: 'user', content: "以下を日本語に翻訳してください。This operation aborts a multipart upload. After a multipart upload is aborted, no\n         additional parts can be uploaded using that upload ID. The storage consumed by any\n         previously uploaded parts will be freed. However, if any part uploads are currently in\n         progress, those part uploads might or might not succeed. As a result, it might be necessary\n         to abort a given multipart upload multiple times in order to completely free all storage\n         consumed by all parts.\n\nTo verify that all parts have been removed and prevent getting charged for the part\n         storage, you should call the ListParts API operation and ensure\n         that the parts list is empty.\n\nNote\n          \n          \n      \n            \n               Directory buckets - If multipart\n                  uploads in a directory bucket are in progress, you can't delete the bucket until\n                  all the in-progress multipart uploads are aborted or completed. To delete these\n                  in-progress multipart uploads, use the ListMultipartUploads operation\n                  to list the in-progress multipart uploads in the bucket and use the\n                     AbortMultipartUpload operation to abort all the in-progress\n                  multipart uploads. \n         \n            \n               Directory buckets -\n                  For directory buckets, you must make requests for this API operation to the Zonal endpoint. These endpoints support virtual-hosted-style requests in the format https://amzn-s3-demo-bucket.s3express-zone-id.region-code.amazonaws.com/key-name\n               . Path-style requests are not supported. For more information about endpoints in Availability Zones, see Regional and Zonal endpoints for directory buckets in Availability Zones in the\n    Amazon S3 User Guide. For more information about endpoints in Local Zones, see Concepts for directory buckets in Local Zones in the\n    Amazon S3 User Guide.\n\nPermissions\n         \n            \n                \n                \n            \n                  \n                     General purpose bucket permissions - For\n                        information about permissions required to use the multipart upload, see\n                           Multipart Upload and\n                           Permissions in the Amazon S3 User Guide.\n               \n                  \n                     Directory bucket permissions - To grant access to this API operation on a directory bucket, we recommend that you use the CreateSession API operation for session-based authorization. Specifically, you grant the s3express:CreateSession permission to the directory bucket in a bucket policy or an IAM identity-based policy. Then, you make the CreateSession API call on the bucket to obtain a session token. With the session token in your request header, you can make API requests to this operation. After the session token expires, you make another CreateSession API call to generate a new session token for use. \nAWS CLI or SDKs create session and refresh the session token automatically to avoid service interruptions when a session expires. For more information about authorization, see CreateSession.\n               \n         \n       \n         HTTP Host header syntax\n         \n            \n               Directory buckets  - The HTTP Host header syntax is \n                  Bucket-name.s3express-zone-id.region-code.amazonaws.com.\n\nThe following operations are related to AbortMultipartUpload:\n\nCreateMultipartUpload\n         \n      \n         \n            UploadPart\n         \n      \n         \n            CompleteMultipartUpload\n         \n      \n         \n            ListParts\n         \n      \n         \n            ListMultipartUploads' "}],
    })
    console.log(response.message.content)
}

call_model('phi4-mini:latest');

